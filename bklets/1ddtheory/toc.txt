软件原理
程序即抽象
抽象即集成与分解
软件原理语言与hosting(runtime)
以OS exe routine为runtime:
图灵机与可编程冯氏模型
保护模式与软件系统的出现(任务系统与IO系统)
可编程的OS与新的软件开发应用体系
以static langsys backend 执行栈为runtime:
高级语言与编译原理
静态类型语言系统与函数栈runtime
高级语言的组件系统
发展的历程:
C与系统编程的局限
高级平台与映射-虚拟机,抽象运行时,面向程序员的封装式,抽象式编程
cpp类抽象语言的适合范围，及其缺点和局限
虚拟机语言
抽象了的语言系统 :
 Runtime
(基于静态体系之上的)运行态与用户态增强支持:
动态语言系统
整合了的软件语言系统:
Soft VM
抽象了的运行时,整合了编译层与运行层的语言系统-虚拟机与集成开发平台
 LangTechs:动态组件技术与高级语言技术
advidioms
封装adt,udt型主导的语言:oo已经成了一种标准
objsys:
抽象冯氏开发中的数据与代码-从平铺,过程的代码到预置,类化的对象代码(ADT&UDT类型与运算系统)(C++,C井)
计算型的语言:
程序即抽象，程序也可以是纯计算得来
js完全
mixed:
统一了的语句产生模式与类型产生模式和发展了的对象控制抽象-基于对象，面向对象，事件控制编程
混合了函数式的语言手法
抽象了的语句产生模式之消息控制抽象-基于UDT的PME模型
抽象了的语句产生模式之过程控制抽象-基于UDT的高级函数，闭包
动态组件技术
整合了的程序，组件，应用，api模型:
使用高阶组件的方式
使用独立语言的二进制级构件的方式-COM,IDL
CompentDistrubitSystem:
分布式组件based分布式appmodel VS pure分布式程序部署based分布式appmodel
软件原理软件模式
分清代码抽象与数据抽象
分清语言支持的功能抽象与非语言层面外的通用抽象
算法，抽象的实现
算法实现:
通用算法与问题依赖的专用算法
算法与数据结构-加进了对离散化了的问题解法的编程
高级语言中的数据结构与代码结构-(系统实现语言C)
代码结构，继续抽象的方式
类型，封装的机制:
高级语言的内部类型语句系统，与UDT扩展系统
接口，扩展的机制:
基本接口方式
使用Advance OO技术(语义OO)的方式及语言级interface dispatch
范式，复用的方式
过程式与函数复用:
过程,函数,过程与结构化范式
oo复用:
Pure OOA与OOD
动态范式,函数范式和OO范式
编程艺术
设计
什么是编程(软件工程)
技术选型之重要：语言之争与银弹
编程艺术领域逻辑栈及应用模型
设计中的架构：对于问题，语法的综合模型，将一次性设计形成架构，做成框架
 系统逻辑栈及桌面应用模型:问题与方案(1)-初级系统开发(以原始的,未经显式抽象和设计的实现式编程方式)
console:
low level native programming
Native api and appmodels:
额外增加的OS子系统的职能(1)-图形系统
额外增加的OS子系统的职能(2)-网络系统
解决程序关于桌面系统模型的问题-highlevel native programming
软件系统的出现(下)-网络,界面
用户空间的应用模型:问题与方案(2)-脱离平台的一般应用问题的开发,用户逻辑(以加进了显式抽象和设计的方式)
Enterprise api and appmodels:
SOA与云计算
分布式appmodel
企业开发
移动开发
编程艺术工程模式
当编程考虑进与人有关的那些东西时-语言内和语言外对高阶设计手段与应用方案的显式支持
 Agile:使用统一软件开发过程的方式-设计与方法论
Design Patterns:
软件设计原则与设计模式问题
使用设计模式-加进了对应用进行固有OOA,OOD和面向重构的编程(OOA,OOD Patterns)
Automation:
使用辅助手段与工具的方式
MoreAppModel:
跨桌面WEB移动端，三端合一的 web BS appmodel与peer2peer cloud appmodel
使用面向应用的集成化的appmodel的方式
使用企业开发的方式-利用中间件技术和分布式技术淡化非业务逻辑
MoreLangSystem:
visual,data drivern,event trigger lang
脚本语言与脚本编程
使用了语言和DSL为后台支撑应用的方式-统一化应用方案,将编程逼到用户级的语义方式进行
使用元化编程语言和脚本化语言的方式
元语言与元编程
问题范式Schemda:
本地编程的语义化
文本的语义-REGEX
文本识别的统一语义-BNF
文档,文件结构头的语义-XML
 

 

